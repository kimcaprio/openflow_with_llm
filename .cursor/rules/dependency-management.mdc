---
alwaysApply: true
description: UV를 사용한 Python 의존성 관리 규칙
---

# UV 기반 의존성 관리 규칙

## UV 사용 원칙

### 1. 패키지 관리 도구
**기본 도구**: UV (Ultra-fast Python package installer)
**기존 도구 대체**: pip, pip-tools, virtualenv 대신 UV 사용

### 2. 프로젝트 구조
```
pyproject.toml          # 프로젝트 메타데이터 및 의존성
uv.lock                 # 정확한 의존성 버전 잠금
.python-version         # Python 버전 명시
requirements.txt        # 호환성을 위한 레거시 파일 (선택적)
```

### 3. 의존성 추가 규칙

#### 새 패키지 설치:
```bash
# 운영 의존성
uv add package-name

# 개발 의존성
uv add --dev package-name

# 특정 버전
uv add "package-name>=1.0.0,<2.0.0"

# 선택적 의존성 그룹
uv add --group docs mkdocs
uv add --group test pytest
```

#### 의존성 그룹 정의:
```toml
[project.optional-dependencies]
dev = ["pytest", "black", "isort", "mypy"]
docs = ["mkdocs", "mkdocs-material"]
test = ["pytest", "pytest-cov", "pytest-mock"]
llm = ["openai", "anthropic", "google-generativeai"]
nifi = ["requests", "pyyaml", "psutil"]
```

### 4. 환경 관리

#### 가상환경 생성 및 활성화:
```bash
# 프로젝트 초기화
uv init

# 가상환경 생성
uv venv

# 의존성 설치
uv sync

# 개발 의존성 포함 설치
uv sync --group dev
```

#### Python 버전 관리:
```bash
# Python 버전 설정
uv python pin 3.11

# 특정 Python 버전으로 환경 생성
uv venv --python 3.11
```

### 5. 스크립트 실행

#### UV를 통한 스크립트 실행:
```bash
# 가상환경에서 스크립트 실행
uv run python src/cli/nifi_cli.py

# 특정 그룹 의존성과 함께 실행
uv run --group test pytest

# 일회성 패키지 실행
uv run --with requests python -c "import requests; print(requests.__version__)"
```

### 6. 의존성 업데이트

#### 정기적인 업데이트:
```bash
# 모든 의존성 업데이트
uv sync --upgrade

# 특정 패키지 업데이트
uv add package-name --upgrade

# 보안 업데이트 확인
uv audit
```

### 7. 프로젝트별 설정

#### pyproject.toml 설정 예시:
```toml
[project]
name = "openflow-with-llm"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "openai>=1.3.7",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
]
nifi = [
    "pyyaml>=6.0.1",
    "psutil>=5.9.0",
]
llm = [
    "anthropic>=0.7.7",
    "google-generativeai>=0.3.2",
    "ollama>=0.1.7",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
]
```

### 8. CI/CD 통합

#### GitHub Actions 예시:
```yaml
- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: '3.11'

- name: Install uv
  run: pip install uv

- name: Install dependencies
  run: uv sync --group dev

- name: Run tests
  run: uv run pytest
```

### 9. 마이그레이션 가이드

#### 기존 프로젝트에서 UV로 전환:
```bash
# 1. UV 설치
pip install uv

# 2. 기존 requirements.txt에서 변환
uv add -r requirements.txt

# 3. pyproject.toml 생성
uv init --lib  # 라이브러리 프로젝트
uv init --app  # 애플리케이션 프로젝트

# 4. 의존성 동기화
uv sync
```

### 10. 성능 최적화

#### UV의 장점 활용:
- **속도**: pip 대비 10-100배 빠른 설치
- **정확성**: 의존성 해결 개선
- **재현성**: uv.lock을 통한 정확한 버전 관리
- **Python 관리**: Python 버전 자동 관리

### 11. 문제 해결

#### 일반적인 문제:
```bash
# 캐시 정리
uv cache clean

# 의존성 트리 확인
uv tree

# 의존성 충돌 해결
uv sync --resolution=highest
```

이 규칙을 따라 UV를 사용하여 효율적이고 안정적인 Python 의존성 관리를 수행해야 합니다.