---
alwaysApply: true
description: MCP 도구 사용 가이드라인 및 우선순위
---

# MCP 도구 사용 가이드라인

## 필수 MCP 도구 활용

### 1. Context7-MCP (기술 문서 및 컨텍스트)
**언제 사용**: NiFi, LLM, 또는 기타 기술 스택에 대한 상세한 정보가 필요한 경우

**사용 우선순위**: 높음 - 기술적 질문이나 구현 시 적극 활용

**사용 예시**:
- Apache NiFi 프로세서 정보 조회
- LLM API 사용법 확인
- Python 라이브러리 문서 참조
- 프레임워크별 베스트 프랙티스 확인

**호출 방법**:
```
1. mcp_context7-mcp_resolve-library-id로 라이브러리 ID 확인
2. mcp_context7-mcp_get-library-docs로 문서 조회
```

### 2. Sequential Thinking Tools (복잡한 코드 생성)
**언제 사용**: 프로젝트 진행에 필요한 복잡한 코드 생성 및 문제 해결

**사용 우선순위**: 높음 - 다단계 개발 작업 시 필수 활용

**사용 예시**:
- 새로운 모듈 설계 및 구현
- 복잡한 알고리즘 개발
- 아키텍처 결정 및 구현
- 다단계 리팩토링 작업

**호출 방법**:
```
mcp_mcp-sequentialthinking-tools_sequentialthinking_tools
```

### 3. DuckDuckGo MCP Server (정보 검색)
**언제 사용**: 최신 정보, 기술 트렌드, 또는 특정 문제 해결책 검색

**사용 우선순위**: 중간 - Context7에서 찾을 수 없는 정보나 최신 정보 필요 시

**사용 예시**:
- 최신 기술 동향 조사
- 특정 에러 해결책 검색
- 라이브러리 버전 호환성 확인
- 커뮤니티 솔루션 탐색

**호출 방법**:
```
1. mcp_duckduckgo-mcp-server_search로 검색
2. mcp_duckduckgo-mcp-server_fetch_content로 상세 내용 조회
```

## 도구 사용 우선순위

1. **Context7-MCP**: 기술 문서 및 API 참조 (최우선)
2. **Sequential Thinking**: 복잡한 개발 작업 (최우선)
3. **DuckDuckGo**: 최신 정보 및 커뮤니티 솔루션 (보조)

## 통합 워크플로우

### 새로운 기능 개발 시:
1. Context7로 관련 기술 문서 조회
2. Sequential Thinking으로 구현 계획 수립
3. 필요시 DuckDuckGo로 최신 정보 보완
4. 단계별 구현 진행

### 문제 해결 시:
1. Context7로 공식 문서 확인
2. DuckDuckGo로 커뮤니티 솔루션 검색
3. Sequential Thinking으로 해결 방안 도출

이러한 MCP 도구들을 적극적으로 활용하여 프로젝트의 품질과 효율성을 극대화해야 합니다.